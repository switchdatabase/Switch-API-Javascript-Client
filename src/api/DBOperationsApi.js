/**
 * Switch Database REST API
 * Switch API is the primary endpoint of data sevices and Switch DB's platform. You can do adding, editing, deleting or listing data works to your database with query operations by using this low-level API based on HTTP.
 *
 * OpenAPI spec version: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AddResponse', 'model/Body', 'model/Error', 'model/SetResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AddResponse'), require('../model/Body'), require('../model/Error'), require('../model/SetResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.SwitchDatabaseRestApi) {
      root.SwitchDatabaseRestApi = {};
    }
    root.SwitchDatabaseRestApi.DBOperationsApi = factory(root.SwitchDatabaseRestApi.ApiClient, root.SwitchDatabaseRestApi.AddResponse, root.SwitchDatabaseRestApi.Body, root.SwitchDatabaseRestApi.Error, root.SwitchDatabaseRestApi.SetResponse);
  }
}(this, function(ApiClient, AddResponse, Body, Error, SetResponse) {
  'use strict';

  /**
   * DBOperations service.
   * @module api/DBOperationsApi
   * @version 1.2.1
   */

  /**
   * Constructs a new DBOperationsApi. 
   * @alias module:api/DBOperationsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addPost operation.
     * @callback module:api/DBOperationsApi~addPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add is used for adding a data object to the list created at Switch DB.
     * You can choose the list that will be added tha data set to with List parameter that will be sent to Header. It&#39;s equal to INSERT query at the relational databases model. The data set that will be added to the database is transmited at request body. For versions upper than v1.2.1, if the data sent is an array, all items in the array are added one by one, so they are added as a whole. 
     * @param {String} aPIKey Your Switch API Key.
     * @param {String} accessToken Your Access Token.
     * @param {String} list Your data list name.
     * @param {String} body Your new value JSON.
     * @param {module:api/DBOperationsApi~addPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddResponse}
     */
    this.addPost = function(aPIKey, accessToken, list, body, callback) {
      var postBody = body;

      // verify the required parameter 'aPIKey' is set
      if (aPIKey == undefined || aPIKey == null) {
        throw new Error("Missing the required parameter 'aPIKey' when calling addPost");
      }

      // verify the required parameter 'accessToken' is set
      if (accessToken == undefined || accessToken == null) {
        throw new Error("Missing the required parameter 'accessToken' when calling addPost");
      }

      // verify the required parameter 'list' is set
      if (list == undefined || list == null) {
        throw new Error("Missing the required parameter 'list' when calling addPost");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling addPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'APIKey': aPIKey,
        'AccessToken': accessToken,
        'List': list
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AddResponse;

      return this.apiClient.callApi(
        '/Add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listPost operation.
     * @callback module:api/DBOperationsApi~listPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * It&#39;s used for listing a data added before.
     * List parameter sent remarks the list that will be do listing work on at Header. It&#39;s equal to SELECT query at relational databases. 
     * @param {String} aPIKey Your Switch API Key.
     * @param {String} accessToken Your Access Token.
     * @param {String} list Your data list name.
     * @param {module:model/Body} body Your Switch DB Query.
     * @param {module:api/DBOperationsApi~listPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.listPost = function(aPIKey, accessToken, list, body, callback) {
      var postBody = body;

      // verify the required parameter 'aPIKey' is set
      if (aPIKey == undefined || aPIKey == null) {
        throw new Error("Missing the required parameter 'aPIKey' when calling listPost");
      }

      // verify the required parameter 'accessToken' is set
      if (accessToken == undefined || accessToken == null) {
        throw new Error("Missing the required parameter 'accessToken' when calling listPost");
      }

      // verify the required parameter 'list' is set
      if (list == undefined || list == null) {
        throw new Error("Missing the required parameter 'list' when calling listPost");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling listPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'APIKey': aPIKey,
        'AccessToken': accessToken,
        'List': list
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/List', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setDelete operation.
     * @callback module:api/DBOperationsApi~setDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * It&#39;s used for deleting a data added before at Switch DB.
     * List parameter sent remarks the list that will be deleted data from at Header and ListItemId parameter remarks the ID consisted by Switch DB for the data that will be deleted. It&#39;s equal to DELETE query at relational databases. 
     * @param {String} aPIKey Your Switch API Key.
     * @param {String} accessToken Your Access Token.
     * @param {String} list Your data list name.
     * @param {String} listItemId Your list item id.
     * @param {module:api/DBOperationsApi~setDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SetResponse}
     */
    this.setDelete = function(aPIKey, accessToken, list, listItemId, callback) {
      var postBody = null;

      // verify the required parameter 'aPIKey' is set
      if (aPIKey == undefined || aPIKey == null) {
        throw new Error("Missing the required parameter 'aPIKey' when calling setDelete");
      }

      // verify the required parameter 'accessToken' is set
      if (accessToken == undefined || accessToken == null) {
        throw new Error("Missing the required parameter 'accessToken' when calling setDelete");
      }

      // verify the required parameter 'list' is set
      if (list == undefined || list == null) {
        throw new Error("Missing the required parameter 'list' when calling setDelete");
      }

      // verify the required parameter 'listItemId' is set
      if (listItemId == undefined || listItemId == null) {
        throw new Error("Missing the required parameter 'listItemId' when calling setDelete");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'APIKey': aPIKey,
        'AccessToken': accessToken,
        'List': list,
        'ListItemId': listItemId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SetResponse;

      return this.apiClient.callApi(
        '/Set', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setPost operation.
     * @callback module:api/DBOperationsApi~setPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * It&#39;s used for updating a data object that is already added to Switch DB.
     * In order to UPDATE a object, Listname and ListItemId parameters should be sent in the Header of the REQUEST as \&quot;List\&quot;, \&quot;ListItemId\&quot;, respectively, as shown in the example below. It&#39;s equal to UPDATE query at relational databases. The data set that will be edited is transmited to the database at request body. 
     * @param {String} aPIKey Your Switch API Key.
     * @param {String} accessToken Your Access Token.
     * @param {String} list Your data list name.
     * @param {String} listItemId Your list item id.
     * @param {String} body Your new value JSON.
     * @param {module:api/DBOperationsApi~setPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SetResponse}
     */
    this.setPost = function(aPIKey, accessToken, list, listItemId, body, callback) {
      var postBody = body;

      // verify the required parameter 'aPIKey' is set
      if (aPIKey == undefined || aPIKey == null) {
        throw new Error("Missing the required parameter 'aPIKey' when calling setPost");
      }

      // verify the required parameter 'accessToken' is set
      if (accessToken == undefined || accessToken == null) {
        throw new Error("Missing the required parameter 'accessToken' when calling setPost");
      }

      // verify the required parameter 'list' is set
      if (list == undefined || list == null) {
        throw new Error("Missing the required parameter 'list' when calling setPost");
      }

      // verify the required parameter 'listItemId' is set
      if (listItemId == undefined || listItemId == null) {
        throw new Error("Missing the required parameter 'listItemId' when calling setPost");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling setPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'APIKey': aPIKey,
        'AccessToken': accessToken,
        'List': list,
        'ListItemId': listItemId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SetResponse;

      return this.apiClient.callApi(
        '/Set', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
