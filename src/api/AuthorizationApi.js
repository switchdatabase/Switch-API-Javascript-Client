/**
 * Switch Database REST API
 * Switch API is the primary endpoint of data sevices and Switch DB's platform. You can do adding, editing, deleting or listing data works to your database with query operations by using this low-level API based on HTTP.
 *
 * OpenAPI spec version: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'));
  } else {
    // Browser globals (root is window)
    if (!root.SwitchDatabaseRestApi) {
      root.SwitchDatabaseRestApi = {};
    }
    root.SwitchDatabaseRestApi.AuthorizationApi = factory(root.SwitchDatabaseRestApi.ApiClient, root.SwitchDatabaseRestApi.Error);
  }
}(this, function(ApiClient, Error) {
  'use strict';

  /**
   * Authorization service.
   * @module api/AuthorizationApi
   * @version 1.2.1
   */

  /**
   * Constructs a new AuthorizationApi. 
   * @alias module:api/AuthorizationApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the tokenGet operation.
     * @callback module:api/AuthorizationApi~tokenGetCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate Access Token
     * For generating Access Token, you need API Key and API Secret parameters that are provided from the developer portal. At the request, API Key that will be sent by using header is generated as portal API Key and Signature parameter is generated as md5(APISecret + ExpireTimestamp) format. At Expire parameter, token&#39;s expire date and time information must be proper to ISO 8601 standarts and Unix Time format with msec information. 
     * @param {String} aPIKey Your Switch API Key.
     * @param {String} signature Signature parameter is generated as md5(APISecret + ExpireTimestamp) format.
     * @param {Number} expire Expire parameter, token&#39;s expire date and time information must be proper to ISO 8601 standarts and Unix Time format with msec information.
     * @param {module:api/AuthorizationApi~tokenGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.tokenGet = function(aPIKey, signature, expire, callback) {
      var postBody = null;

      // verify the required parameter 'aPIKey' is set
      if (aPIKey == undefined || aPIKey == null) {
        throw new Error("Missing the required parameter 'aPIKey' when calling tokenGet");
      }

      // verify the required parameter 'signature' is set
      if (signature == undefined || signature == null) {
        throw new Error("Missing the required parameter 'signature' when calling tokenGet");
      }

      // verify the required parameter 'expire' is set
      if (expire == undefined || expire == null) {
        throw new Error("Missing the required parameter 'expire' when calling tokenGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'APIKey': aPIKey,
        'Signature': signature,
        'Expire': expire
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/Token', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
