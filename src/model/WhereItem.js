/**
 * Switch Database REST API
 * Switch API is the primary endpoint of data sevices and Switch DB's platform. You can do adding, editing, deleting or listing data works to your database with query operations by using this low-level API based on HTTP.
 *
 * OpenAPI spec version: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.SwitchDatabaseRestApi) {
      root.SwitchDatabaseRestApi = {};
    }
    root.SwitchDatabaseRestApi.WhereItem = factory(root.SwitchDatabaseRestApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The WhereItem model module.
   * @module model/WhereItem
   * @version 1.2.1
   */

  /**
   * Constructs a new <code>WhereItem</code>.
   * @alias module:model/WhereItem
   * @class
   */
  var exports = function() {
    var _this = this;




  };

  /**
   * Constructs a <code>WhereItem</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/WhereItem} obj Optional instance to populate.
   * @return {module:model/WhereItem} The populated <code>WhereItem</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('column')) {
        obj['column'] = ApiClient.convertToType(data['column'], 'String');
      }
      if (data.hasOwnProperty('value')) {
        obj['value'] = ApiClient.convertToType(data['value'], 'String');
      }
    }
    return obj;
  }

  /**
   * You can explain the controls of more than one state with where. The controls of states: equal, notEqual, like, greaterThan, lessThan
   * @member {String} type
   */
  exports.prototype['type'] = undefined;
  /**
   * Column name
   * @member {String} column
   */
  exports.prototype['column'] = undefined;
  /**
   * Column value
   * @member {String} value
   */
  exports.prototype['value'] = undefined;



  return exports;
}));


